# HEAPS
## Day 15 - Tuesday, July 21, 2020 (Reviewed with JonAlf on Wednesday, July 22, 2020)

* A heap is a complete binary tree.
* The heaps used here are min-heaps where the root is always the min and
* all parents are less than or equal to their children.

####################################################################################################
# Draw the min-heaps that would be created from adding the following values in the order provided. #
####################################################################################################

a) 33 61 13 38 96 41 59 96 36 67
add(33)---------------------------------------------------------------
33

add(51)---------------------------------------------------------------
	33
	
61

add(13)---------------------------------------------------------------
	33			bubble swap				13
				===========>
61		13							61		33

add(38)---------------------------------------------------------------
		13										13
					bubble swap
	61		33		===========>			38		33

38										61

add(96)---------------------------------------------------------------
			13
	
	38				33

61		96

add(41)---------------------------------------------------------------
			13
	
	38				33

61		96		41

add(59)---------------------------------------------------------------
			13
	
	38				33

61		96		41		59

add(96)---------------------------------------------------------------
				13
		
		38				33

	61		96		41		59

96

add(36)---------------------------------------------------------------
					13														13														13
		
			38				33			bubble swap	x1				38				33			bubble swap	x2				36				33	
										===========>											===========>
	61			96		41		59							36			96		41		59							38			96		41		59

96		36												96		61												96		61

add(67)---------------------------------------------------------------
						13															13
																		 /					\
			36					33			bubble swap					36					33	
											===========>		 /				\		 /		\
	38				96		41		59							38				67		41		59
															 /		\		 /
96		61		67											96		61		96
---------------------------------------------------------------
!HEAP SORT:
1) Put values in heap
2) Remove root until empty
*Removed values will pop out sorted!

remove(13)---------------------------------------------------------------
																					96															33
		
			36					33			grab last val				36					33			bubble down					36					96		
											===========>												===========>
	38				67		41		59							38				67		41		59							38				67		41		59

96		61		96											96		61													96		61

remove(13) continued---------------------------------------------------------------
													33
										 /					\
			bubble down					36					41	
			===========>		 /				\		 /		\
								38				67		96		59
							 /		\
							96		61
################################################################################################

b) 41 61 33 38 96 36 67 96 59 13
*shown in less detail that array a

add: 41, 61, 33---------------------------------------------------------------
	41
	
61		33

add: 38 (and bubble up)---------------------------------------------------------------
		33

	41		38		<=== also needed to bubble back down to maintain (parent <= child)

61

add: 96---------------------------------------------------------------
			33

	41			38

61		96

add: 36 (and bubble up)---------------------------------------------------------------
			33

	41				36

61		96		38

add: 67, 96---------------------------------------------------------------
					33

			41				36

	61			96		38

67		96

add: 59 (and bubble up)---------------------------------------------------------------
						33

			41					36

	61				59		38

67		96		96

add: 13 (and bubble up)---------------------------------------------------------------
							13
			 /						\
			33						36
	 /				\			 /
	61				41			38
 /		\		 /		\
67		96		96		59